{{!-- station.hbs, the view for the station --}}
{{!-- a lot going on here... synth, sequencer, station info, etc --}}
{{!-- served by this routing method in server.js: app.get('/station/:stationid', function (req, res) {...}); --}}

<!DOCTYPE HTML> 
<html lang="en"> 
<head>
<title>LOOPER</title>
<link rel="stylesheet" href="../style.css">
<meta http-equiv="Content-Type" content="text/html; charset=utf-8"> 
<meta http-equiv="Content-Language" content="en-us">
<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>
<script src="https://rawgit.com/nexus-js/ui/master/dist/NexusUI.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/tone/0.12.66/Tone.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.dev.js"></script>
<link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/css/bootstrap.min.css">
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
<script type="text/javascript" src="../serverLink.js"></script>
<script type="text/javascript" src="../peer.js"></script>
<script type="text/javascript" src="../user.js"></script>
<script type="text/javascript" src="../SoundMatrix.js"></script>
<script type="text/javascript" src="../station.js"></script>
</head>
<body>
  {{!-- this is a way to passing JSON data from the server to use in the front-end javascript --}}
    {{!-- render data in html page (in html source, not visable to user) --}}
    <div id='userid' data-userid={{userid}}></div>
    <div id='station' data-station={{station}}></div>
    {{!-- javascript pulls this data out and saves it as javascript variables for easy referencing --}}
    {{!-- eg. let userid = $('#userid').data('userid'); let stationData = $('#station').data('station'); --}}
  <div id="header">
    <div id="looper-heading">
      <h1 id='looper' class = "neon" data-text="[Looper]">Looper</h1>
    </div>
</div>

<div id="wrap" style="float:left; width: 80%">
  <div id="looper">
    <div id="seq"></div>
    <button onclick="start()">start</button>
    <button onclick="stop()">stop</button>
  </div>

  <div id="synth">
    <ul id="keys">
      <li id="0" class="white a" > </li>
      <li id="1" class="black a" ></li>
      <li id="2" class="white a"></li>
      <li id="3" class="black a"></li>
      <li id="4" class="white a"></li>
      <li id="5" class="black a"></li>
      <li id="6" class="white a"></li>
      <li id="7" class="white"></li>
      <li id="8" class="black a"></li>
      <li id="9" class="white a"></li>
      <li id="10" class="black a"></li>
      <li id="11" class="white a"></li>
      <li id="12" class="white"></li>
      <li id="13" class="black a"></li>
      <li id="14" class="white a"></li>
      <li id="15" class="black a"></li>
      <li id="16" class="white a"></li>
      <li id="17" class="black a"></li>
      <li id="18" class="white a"></li>
      <li id="19" class="white"></li>
      <li id="20" class="black a"></li>
      <li id="21" class="white a"></li>
      <li id="22" class="black a"></li>
      <li id="23" class="white a"></li>
      <li id="24" class="white"></li>
      <li id="25" class="black a"></li>
      <li id="26" class="white a"></li>
      <li id="27" class="black a"></li>
      <li id="28" class="white a"></li>
      <li id="29" class="black a"></li>
      <li id="30" class="white a"></li>
      <li id="31" class="white"> </li>
    </ul>
  </div>
</div>


<div id="station-info" style="padding-right: 20px; float:left; height: 60%; width: 20%;">
  <div class="container">
  <ul class="nav nav-tabs">
    <li class="active"><a data-toggle="tab" href="#menu1">Station Info</a></li>
    <li><a data-toggle="tab" href="#menu2">Chat</a></li>
    <li><a data-toggle="tab" href="#menu3">Log</a></li>
  </ul>

  <div class="tab-content">
    <div id="menu1" class="tab-pane fade in active">
      <h3>Station Info</h3>
      <p id='node-id'>User ID: </p>
      <p id='station-id'>Station ID: </p>
      <p >Connected Peers...</p>
      <ul id='peers'><ul>
    </div>
    <div id="menu2" class="tab-pane fade">
      <h3>Chat</h3>
        <ul id="peermsg"></ul>
        <form id= "form">
          <input type="text" id="text" placeholder="Enter message"><input type="submit" value="Send">
        </form>
    </div>
    <div id="menu3" class="tab-pane fade">
      <h3>Debug Log</h3>
        <ul id="log"></ul>
    </div>
  </div>
</div>
</div>

<div style="clear:both"></div>

<script type="text/javascript">
  // load data embedded in html as js vars
  let userid = $('#userid').data('userid');
  let stationData = $('#station').data('station');

  // create station from class defined in station.js
  let station = new Station(stationData, null);
  let stationid = station.ownerid;
  // create user from class defined in user.js
  let user = new User(userid);

  // set station info
  let Tracker = [];
  $('#node-id').text(`You are: ${user.node.id}`);
  $('#station-id').text(`Station owner: ${station.ownerid}`);
  station.connectedPeers.forEach((p)=>{
    if (Tracker.indexOf(p) == -1){
      Tracker.unshift(p);
      $('ul#peers').append(`<li>${p}</li>`);
    }
    //console.log(Tracker);
  });


  document.getElementById("form").onsubmit = function(e) {
    e.preventDefault();
    var msg = $('#text').val();
    $('ul#peermsg').append(`<li>${user.node.id}: ${msg}</li>`);
    user.connections.forEach( (nodeid) => { 
      user.transmitMsg(nodeid,msg); 
    });
    $('#text').val('');
    $('#text').focus();
  };
  
  function displayMsg(peerId, msg){
    $("ul#peermsg").append(`<li>${peerId} :${msg}</li>`)
  }

  let IdTracker = []
  if(userid !== stationid ){//&& Tracker.indexOf(userid) == -1){
    station.join(user);
    Tracker.unshift(userid);
    console.log(IdTracker);
    // serverLink.emit('joinStation', stationid, userid);
    // user.connect(stationid);
    // console.log('joinStation');
  } 

</script>

<script>
  let context = new (window.AudioContext || window.webkitAudioContext)();
  // initialize sounds for sequencer from class defined in SoundMatrix.js
  let sounds = [
    new Sample('bass', 'https://raw.githubusercontent.com/Tonejs/Tone.js/master/examples/audio/loop/bass.mp3'),
    new Sample('kick', 'https://raw.githubusercontent.com/Tonejs/Tone.js/master/examples/audio/loop/kick.mp3'),
    new Sample('snare', 'https://raw.githubusercontent.com/Tonejs/Tone.js/master/examples/audio/loop/snare.mp3'),
    new Sample('F#', 'https://raw.githubusercontent.com/Tonejs/Tone.js/master/examples/audio/casio/Fs2.mp3')
  ];
  // initialize sequencer matrix from class defined in SoundMatrix.js
  let matrix = new SoundMatrix(
      'seq',
      sounds,
      context,
      16
    );
  matrix.sequencer.on('change',function(data) {
    seqChange(data);
  });

  function start() {
    matrix.start();
  }

  function stop() {
    matrix.stop();
  }

  function seqChange(data) {
    console.log('seqChange: ' + JSON.stringify(data));
    //$('ul#log').append(`<li>${user.node.id}: ${data.state}</li>`);
    console.log(user.connections);
    console.log("connections");
    user.connections.forEach( (nid) => {
      user.transmitSeqChange(nid, data);
    });
  }

  function updateSeq(data){
    // update cell on sequencer (TODO: move to SoundMatrix class)
    matrix.sequencer.matrix.set.cell(data.column, data.row, data.state);
  }

  function displayLog(nodeId, msg){
    console.log(`${nodeId}: ${msg}`);
    $('ul#log').append(`<li>${nodeId}: ${msg}</li>`);
  }
</script>

<script>
  // synth functionality...
  function pianoFrequency(id){
  var notes = ["F2", "Gb2", "G2", "Ab2", "A2", "Bb2", "B2", "C3", "Db3", "D3", "Eb3", "E3", "F3", "Gb3", "G3", "Ab3", "A3", "Bb3", "B3", "C4", "Db4", "D4", "Eb4", "E4", "F4", "Gb4", "G4", "Ab4", "A4", "Bb4", "B4", "C5", "Db5", "D5", "Eb5", "E5", "F5", "Gb5", "G5", "Ab5", "A5", "Bb5", "B5", "C6"];
  // console.log(`${id}, ${notes[id]}`);
  return notes[id];
  };
  $(document).ready(function(){
    $("#keys li").click(function(){
      var dist = new Tone.Distortion(2).toMaster();
      var synth = new Tone.Synth().connect(dist);
      synth.triggerAttackRelease(pianoFrequency(this.id), "8n");
      });
  });
</script>

<br/> <br/> <br/> 
</body>
</html>
