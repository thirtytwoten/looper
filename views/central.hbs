<style>
.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}
.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}
#prompt {
  position: absolute;
  top: 100px;
  left: 50%;
  margin-left: -200px;
  width: 400px;
  background-color: #eee;
  z-index: 2;
  padding: 10px;
}
</style>

<h1>Looper</h1>
<svg width="960" height="600"></svg>
<a href='../station' class="button" type="button">Create Station</button>

<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="//d3js.org/d3-scale-chromatic.v0.3.min.js"></script>
<script>

let networkData = {"nodes":[{"id":"a","group":0,"host":true},{"id":"b","group":0,"host":false},{"id":"c","group":0,"host":false},{"id":"d","group":0,"host":false},{"id":"a2","group":1,"host":true},{"id":"b2","group":1,"host":false},{"id":"c2","group":1,"host":false},{"id":"d2","group":1,"host":false}],"links":[{"source":"b","target":"a","value":1},{"source":"c","target":"a","value":1},{"source":"d","target":"a","value":1},{"source":"b2","target":"a2","value":1},{"source":"c2","target":"a2","value":1},{"source":"d2","target":"a2","value":1}]};

drawNetwork(networkData);

function drawNetwork(networkData) {

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");
//var color = d3.scaleOrdinal(d3.schemePastel1);
//https://github.com/d3/d3-scale-chromatic
var colorArray = generateColors(14);
function generateColors(n){
  colors = [];
  for (let i=0; i<n; i++){
    let t = 1.0/n * i;
    colors.push(d3.interpolateRainbow(t));
  }
  return colors;// shuffle? colors.sort(function() { 0.5 - Math.random() }
};
var simulation = d3.forceSimulation()
  .force("link", d3.forceLink().id(function(d) { return d.id; }).distance(100))
  .force("charge", d3.forceManyBody())
  .force("center", d3.forceCenter(width / 2, height / 2))
  .force('collision', d3.forceCollide(45));

  svg.selectAll("*").remove();
  graph = networkData;
  console.log(graph);
  var link = svg.append("g")
      .attr("class", "links")
    .selectAll("line")
    .data(graph.links)
    .enter().append("line")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
  var node = svg.append("g")
      .attr("class", "nodes")
    .selectAll("circle")
    .data(graph.nodes)
    .enter().append("circle")
      .attr("r", function(d) { return d.host ? 40 : 20 })
      .attr("fill", function(d) { return colorArray[d.group]; })
      .call(d3.drag()
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));
  node.append("title")
      .text(function(d) { return d.id; });
  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);
  simulation.force("link")
      .links(graph.links);
  function ticked() {
    link
        .attr("x1", function(d) { return d.source.x; })
        .attr("y1", function(d) { return d.source.y; })
        .attr("x2", function(d) { return d.target.x; })
        .attr("y2", function(d) { return d.target.y; });
    node
        .attr("cx", function(d) { return d.x; })
        .attr("cy", function(d) { return d.y; });
  }
  function dragstarted(d) {
    if (!d3.event.active) simulation.alphaTarget(0.3).restart();
    d.fx = d.x;
    d.fy = d.y;
  }
  function dragged(d) {
    d.fx = d3.event.x;
    d.fy = d3.event.y;
  }
  function dragended(d) {
    if (!d3.event.active) simulation.alphaTarget(0);
    d.fx = null;
    d.fy = null;
  }
}
</script>