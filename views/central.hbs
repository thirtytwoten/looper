<style>

.links line {
  stroke: #999;
  stroke-opacity: 0.6;
}

.nodes circle {
  stroke: #fff;
  stroke-width: 1.5px;
}

#prompt {
  position: absolute;
  top: 100px;
  left: 50%;
  margin-left: -200px;
  width: 400px;
  background-color: #eee;
  z-index: 2;
  padding: 10px;
}
</style>

{{!-- <script src="./bundle.js"></script> --}}
<script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/2.1.0/socket.io.dev.js"></script>
<script>
let socket = io.connect(`${window.location.hostname}:${window.location.port}`);

socket.on('connect', function(){console.log(`socket connected`)});
socket.on('event', function(data){console.log(`event: ${data}`)});
socket.on('disconnect', function(){console.log(`socket disconnected`)});
</script>

<script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.8/jquery.min.js"></script>
<script src="https://d3js.org/d3.v4.min.js"></script>
<script src="//d3js.org/d3-scale-chromatic.v0.3.min.js"></script>
<div id="prompt">
  <div class="input-group">
      <input id="station-name" type="text" class="form-control" placeholder="Name your station" autocomplete="off">
      <span class="input-group-btn">
        <input id="create" class="btn btn-primary" type="submit" value="create station">
      </span>
    </div>
{{!--     <div class="station-template-select col-md-12">
      <label>Choose a station template:</label>
        <ul class="station-selection">
          <li class="selected" data-template="1">
            <img src="img/preview-tank-1.png">
          </li>
          <li data-template="2">
            <img src="img/preview-tank-2.png">
          </li>
          <li data-template="3">
            <img src="img/preview-tank-3.png">
          </li>
        </ul>
    </div> --}}
</div>
<svg width="960" height="600"></svg>
<div id="graphData" data-graph={{graphData}}></div>

<script>
$(document).ready( function(){

  $('#create').click( function(){
    stationName = $('#station-name').val();
    socket.emit('createStation', stationName, 'nodeId-test');
  });

  // $('ul.station-template-select li').click( function(){
  //   $('.station-template-select li').removeClass('selected')
  //   $(this).addClass('selected');
  //   stationTemplate = $(this).data('template');
  // });

});
</script>
<script>

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

//var color = d3.scaleOrdinal(d3.schemePastel1);
//https://github.com/d3/d3-scale-chromatic
var colorArray = generateColors(8);

function generateColors(n){
  colors = [];
  for (let i=0; i<n; i++){
    let t = 1.0/n * i;
    colors.push(d3.interpolateRainbow(t));
  }
  return colors;// shuffle? colors.sort(function() { 0.5 - Math.random() }
};

var simulation = d3.forceSimulation()
  .force("link", d3.forceLink().id(function(d) { return d.id; }).distance(100))
  .force("charge", d3.forceManyBody())
  .force("center", d3.forceCenter(width / 2, height / 2));

graph = $('#graphData').data('graph');

var link = svg.append("g")
    .attr("class", "links")
  .selectAll("line")
  .data(graph.links)
  .enter().append("line")
    .attr("stroke-width", function(d) { return Math.sqrt(d.value); });

var node = svg.append("g")
    .attr("class", "nodes")
  .selectAll("circle")
  .data(graph.nodes)
  .enter().append("circle")
    .attr("r", function(d) { return d.host ? 40 : 20 })
    .attr("fill", function(d) { return colorArray[d.group]; })
    .call(d3.drag()
        .on("start", dragstarted)
        .on("drag", dragged)
        .on("end", dragended));

node.append("title")
    .text(function(d) { return d.id; });

simulation
    .nodes(graph.nodes)
    .on("tick", ticked);

simulation.force("link")
    .links(graph.links);

function ticked() {
  link
      .attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });

  node
      .attr("cx", function(d) { return d.x; })
      .attr("cy", function(d) { return d.y; });
}

function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}

</script>

